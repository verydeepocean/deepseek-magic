// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞–Ω–∫–æ–≤ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async function loadChatContent(chatId) {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ —á–∞–Ω–∫–∞—Ö
    const meta = await new Promise((resolve, reject) => {
      chrome.storage.local.get([`${chatId}_meta`], (result) => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve(result[`${chatId}_meta`]);
        }
      });
    });

    if (!meta) {
      throw new Error('Chat content not found');
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏
    const chunkKeys = Array.from({ length: meta.chunks }, (_, i) => `${chatId}_chunk_${i}`);
    const chunks = await new Promise((resolve, reject) => {
      chrome.storage.local.get(chunkKeys, (result) => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve(Object.values(result));
        }
      });
    });

    // –°–æ–±–∏—Ä–∞–µ–º —á–∞–Ω–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É –∏ –ø–∞—Ä—Å–∏–º JSON
    const serialized = chunks.join('');
    return JSON.parse(serialized);
  } catch (error) {
    console.error('Error loading chat content:', error);
    throw error;
  }
}

document.addEventListener('DOMContentLoaded', async () => {
  const chatContent = document.getElementById('chatContent');
  const copyBtn = document.querySelector('.copy-btn');
  const generateSummaryBtn = document.querySelector('.generate-summary-btn');
  const themeToggle = document.querySelector('.theme-toggle');
  const title = document.querySelector('.title');
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL
  const urlParams = new URLSearchParams(window.location.search);
  const timestamp = urlParams.get('id');
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google API
  const GOOGLE_API_KEY = 'YOUR_API_KEY'; // –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
  const GOOGLE_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary
  async function generateSummary() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
      const chatMessages = document.querySelectorAll('.chat-message');
      if (!chatMessages.length) {
        throw new Error('No chat messages found');
      }

      // –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —á–∞—Ç–∞
      const chatText = Array.from(chatMessages)
        .map(msg => {
          const role = msg.classList.contains('user-message') ? 'User' : 'Assistant';
          const content = msg.querySelector('.message-content').textContent.trim();
          return `${role}: ${content}`;
        })
        .join('\n\n');

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const settings = await new Promise(resolve => {
        chrome.storage.sync.get(['settings'], result => {
          resolve(result.settings || {
            provider: 'openrouter',
            apiKeys: { openrouter: '', google: '' },
            model: 'openai/gpt-4-turbo-preview',
            summaryPrompt: 'Please generate a concise summary of this chat conversation in 2-3 sentences: {text}'
          });
        });
      });

      if (!settings.apiKeys || !settings.apiKeys[settings.provider]) {
        throw new Error('API key not found. Please add it in Settings.');
      }

      const apiKey = settings.apiKeys[settings.provider];

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      const generateSummaryBtn = document.querySelector('.generate-summary-btn');
      generateSummaryBtn.disabled = true;
      generateSummaryBtn.classList.add('loading');
      generateSummaryBtn.innerHTML = '‚åõ Generating...';

      let response;
      let summary;

      if (settings.provider === 'google') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Google AI API
        const apiVersion = 'v1beta';
        const modelId = settings.model;
        
        response = await fetch(`https://generativelanguage.googleapis.com/${apiVersion}/models/${modelId}:generateContent?key=${apiKey}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            contents: [{
              parts: [{
                text: settings.summaryPrompt.replace('{text}', chatText)
              }]
            }]
          })
        });

        if (!response.ok) {
          const error = await response.json();
          console.error('Google AI API error:', error);
          throw new Error(error.error?.message || 'Failed to generate summary');
        }

        const data = await response.json();
        console.log('Google AI API response:', data);

        if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
          console.error('Invalid Google AI response format:', data);
          throw new Error('Invalid response format from Google AI');
        }

        const content = data.candidates[0].content;
        if (!content.parts || !content.parts[0] || !content.parts[0].text) {
          console.error('Missing text in Google AI response:', content);
          throw new Error('No text generated from Google AI');
        }

        summary = content.parts[0].text;
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter API
        response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`,
            'HTTP-Referer': 'https://github.com/your-username/deepseek-favorites',
            'X-Title': 'DeepSeek Favorites Extension'
          },
          body: JSON.stringify({
            model: settings.model,
            messages: [
              {
                role: 'user',
                content: settings.summaryPrompt.replace('{text}', chatText)
              }
            ]
          })
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.message || 'Failed to generate summary');
        }

        const data = await response.json();
        console.log('API Response:', data);

        if (!data || !data.choices || !Array.isArray(data.choices) || data.choices.length === 0) {
          throw new Error('Invalid API response format: missing or empty choices array');
        }

        const firstChoice = data.choices[0];
        if (!firstChoice || !firstChoice.message || !firstChoice.message.content) {
          throw new Error('Invalid API response format: missing message content');
        }

        summary = firstChoice.message.content;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä summary
      const summaryContainer = document.getElementById('summaryContainer');
      summaryContainer.innerHTML = `
        <div class="summary-title">Summary:</div>
        <div class="summary-content">${summary}</div>
      `;
      summaryContainer.classList.add('has-summary');

      // –ü–æ–ª—É—á–∞–µ–º timestamp –∏–∑ URL
      const urlParams = new URLSearchParams(window.location.search);
      const timestamp = urlParams.get('id');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º summary –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      await Promise.all([
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        new Promise(resolve => {
          chrome.storage.local.set({
            [`${timestamp}_summary`]: summary
          }, resolve);
        }),
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        new Promise(resolve => {
          chrome.storage.sync.get(['favorites'], (result) => {
            const favorites = result.favorites || [];
            const updatedFavorites = favorites.map(f => {
              if (f.timestamp === timestamp) {
                // –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                const descriptions = summary.split('\n').map(d => d.trim()).filter(Boolean);
                const cleanDescription = [...new Set(descriptions)].join('\n');
                return { ...f, description: cleanDescription };
              }
              return f;
            });

            chrome.storage.sync.set({ favorites: updatedFavorites }, resolve);
          });
        })
      ]);

      // –ö–æ–ø–∏—Ä—É–µ–º summary –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
      await navigator.clipboard.writeText(summary);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ popup –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
      chrome.runtime.sendMessage({
        action: 'updateDescription',
        timestamp: timestamp,
        description: summary
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –æ–∫–Ω–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (window.opener && !window.opener.closed) {
        window.opener.postMessage({
          action: 'updateDescription',
          timestamp: timestamp,
          description: summary
        }, '*');
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      showNotification('Summary generated, saved as description and copied to clipboard!');

    } catch (error) {
      console.error('Error generating summary:', error);
      showNotification(error.message || 'Failed to generate summary. Please try again.', true);
    } finally {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const generateSummaryBtn = document.querySelector('.generate-summary-btn');
      generateSummaryBtn.disabled = false;
      generateSummaryBtn.classList.remove('loading');
      generateSummaryBtn.innerHTML = 'üìù Generate Summary';
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–º—ã
  function setTheme(theme) {
    document.body.setAttribute('data-theme', theme);
    chrome.storage.sync.set({ theme });
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
  chrome.storage.sync.get(['theme'], (result) => {
    const savedTheme = result.theme || 'light';
    setTheme(savedTheme);
  });

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
  themeToggle.addEventListener('click', () => {
    const currentTheme = document.body.getAttribute('data-theme');
    setTheme(currentTheme === 'light' ? 'dark' : 'light');
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
  function escapeHtml(unsafe) {
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
  try {
    const metaResult = await new Promise(resolve => {
      chrome.storage.local.get([`${timestamp}_meta`], resolve);
    });

    if (metaResult[`${timestamp}_meta`]) {
      const meta = metaResult[`${timestamp}_meta`];
      const chunks = [];
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏
      for (let i = 0; i < meta.chunks; i++) {
        const key = `${timestamp}_chunk_${i}`;
        const chunk = await new Promise(resolve => {
          chrome.storage.local.get([key], result => resolve(result[key]));
        });
        chunks.push(chunk);
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      const chatData = JSON.parse(chunks.join(''));
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º summary
      chrome.storage.sync.get(['favorites'], (result) => {
        const favorite = result.favorites.find(f => f.timestamp === timestamp);
        if (favorite) {
          title.textContent = `Chat History: ${favorite.title}`;
          document.title = favorite.title;

          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º summary –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
          if (favorite.description) {
            const summaryContainer = document.getElementById('summaryContainer');
            summaryContainer.innerHTML = `
              <div class="summary-title">Summary:</div>
              <div class="summary-content">${favorite.description}</div>
            `;
            summaryContainer.classList.add('has-summary');
          }
        }
      });
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º HTML
      const chatHtml = chatData.map(message => {
        return `
          <div class="chat-message ${message.type === 'question' ? 'user-message' : 'assistant-message'}">
            <div class="message-header">${message.type === 'question' ? '<strong>User:</strong>' : '<strong>Assistant:</strong>'}</div>
            <div class="message-content">${message.html || message.content}</div>
          </div>
        `;
      }).join('');

      chatContent.innerHTML = chatHtml;

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
      copyBtn.addEventListener('click', () => {
        const textToCopy = chatData.map(message => {
          const role = message.type === 'question' ? 'User' : 'Assistant';
          return `${role}:\n${message.content}\n`;
        }).join('\n');

        navigator.clipboard.writeText(textToCopy).then(() => {
          const originalText = copyBtn.innerHTML;
          copyBtn.innerHTML = '‚úÖ Copied!';
          setTimeout(() => {
            copyBtn.innerHTML = originalText;
          }, 2000);
        }).catch(err => {
          console.error('Failed to copy text: ', err);
          copyBtn.innerHTML = '‚ùå Error';
          setTimeout(() => {
            copyBtn.innerHTML = originalText;
          }, 2000);
        });
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary
      generateSummaryBtn.addEventListener('click', generateSummary);
    } else {
      chatContent.innerHTML = '<div class="chat-container"><p>No chat history available</p></div>';
      copyBtn.style.display = 'none';
      generateSummaryBtn.style.display = 'none';
    }
  } catch (error) {
    console.error('Error loading chat:', error);
    chatContent.innerHTML = '<div class="chat-container"><p>Error loading chat history</p></div>';
    copyBtn.style.display = 'none';
    generateSummaryBtn.style.display = 'none';
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  function showNotification(message, isError = false) {
    const notification = document.createElement('div');
    notification.textContent = message;
    notification.className = `notification ${isError ? 'error' : 'success'}`;
    
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
      notification.classList.add('show');
    }, 100);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
  function showCopyButton(copyBtn) {
    copyBtn.classList.remove('hidden');
    copyBtn.classList.add('visible');
  }

  function hideCopyButton(copyBtn) {
    copyBtn.classList.remove('visible');
    copyBtn.classList.add('hidden');
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –¥—Ä—É–≥–∏—Ö –æ–∫–æ–Ω
  window.addEventListener('message', (event) => {
    if (event.data.action === 'updateDescription') {
      const editForm = document.querySelector('.edit-form');
      if (editForm) {
        const descriptionTextarea = editForm.querySelector('.edit-description');
        if (descriptionTextarea) {
          descriptionTextarea.value = event.data.description;
        }
      }
    }
  });
}); 