// –§—É–Ω–∫—Ü–∏—è debounce –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function getCleanMessageText(container) {
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π div –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
  const tempDiv = document.createElement('div');
  // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∏—Å–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const messageContent = container.querySelector('[class*="markdown-"]');
  if (!messageContent) return '';
  
  // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
  const clone = messageContent.cloneNode(true);
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const elementsToRemove = clone.querySelectorAll('button, [class*="ds-icon"], [role="button"]');
  elementsToRemove.forEach(el => el.remove());
  
  // –ü–æ–ª—É—á–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
  tempDiv.innerHTML = clone.innerHTML;
  const cleanText = tempDiv.textContent.trim()
    .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
    .replace(/^\d+\.\s*/, ''); // –£–¥–∞–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
  
  return cleanText;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
(function initializeNotifications() {
  const notificationStyles = document.createElement('style');
  notificationStyles.textContent = `
    .deepseek-notification {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 12px 24px;
      border-radius: 4px;
      font-size: 14px;
      z-index: 2147483647;
      opacity: 0;
      transform: translateY(10px);
      transition: opacity 0.3s ease, transform 0.3s ease;
      box-shadow: 0 2px 5px rgba(0,0,0,0.2);
      max-width: 300px;
      word-wrap: break-word;
      pointer-events: none;
    }

    .deepseek-notification.success {
      background: #198754;
      color: white;
    }

    .deepseek-notification.error {
      background: #dc3545;
      color: white;
    }

    .deepseek-notification.show {
      opacity: 1;
      transform: translateY(0);
    }
  `;
  document.documentElement.appendChild(notificationStyles);
})();

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, isError = false) {
  console.log('Showing notification:', message, 'isError:', isError);
  
  // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const existingNotifications = document.querySelectorAll('.deepseek-notification');
  existingNotifications.forEach(notification => notification.remove());

  const notification = document.createElement('div');
  notification.className = `deepseek-notification ${isError ? 'error' : 'success'}`;
  
  // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
  const [title, text] = message.split('\n');
  notification.innerHTML = `
    <div style="font-weight: bold; margin-bottom: 4px;">${title}</div>
    ${text ? `<div style="font-size: 12px; opacity: 0.9;">${text}</div>` : ''}
  `;
  
  document.documentElement.appendChild(notification);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  requestAnimationFrame(() => {
    notification.classList.add('show');
  });
  
  // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—à–∏–±–æ–∫
  const duration = isError ? 5000 : 3000;
  setTimeout(() => {
    notification.classList.remove('show');
    setTimeout(() => notification.remove(), 300);
  }, duration);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function getMessageContent(container) {
  if (!container) return { text: '', html: '' };
  
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π div –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
  const tempDiv = document.createElement('div');
  tempDiv.innerHTML = container.innerHTML;
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const elementsToRemove = tempDiv.querySelectorAll('button, [class*="ds-icon"], [role="button"]');
  elementsToRemove.forEach(el => el.remove());
  
  // –ü–æ–ª—É—á–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ HTML
  const text = tempDiv.textContent.trim()
    .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
    .replace(/^\d+\.\s*/, ''); // –£–¥–∞–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
  
  // –ü–æ–ª—É—á–∞–µ–º HTML, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const html = container.innerHTML;
  
  return { text, html };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —á–∞—Ç–∞
async function getChatContent() {
  const chatContent = [];
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
  const messages = document.querySelectorAll('[class*="chat-message"]');
  
  messages.forEach(message => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç)
    const isQuestion = message.classList.contains('user') || 
                      message.querySelector('[class*="user"]') !== null;
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const contentContainer = message.querySelector('[class*="markdown"]') || 
                           message.querySelector('[class*="content"]');
    
    if (contentContainer) {
      const content = getMessageContent(contentContainer);
      
      chatContent.push({
        type: isQuestion ? 'question' : 'answer',
        content: content.text,
        html: content.html
      });
    }
  });

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ
  if (chatContent.length === 0) {
    const alternativeMessages = document.querySelectorAll('.fbb737a4, .ds-markdown.ds-markdown--block');
    
    alternativeMessages.forEach(message => {
      const isQuestion = message.classList.contains('fbb737a4');
      const content = getMessageContent(message);
      
      chatContent.push({
        type: isQuestion ? 'question' : 'answer',
        content: content.text,
        html: content.html
      });
    });
  }

  return chatContent;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —á–∞–Ω–∫–∏
function splitIntoChunks(data, maxChunkSize = 8000) {
  const serialized = JSON.stringify(data);
  const chunks = [];
  let index = 0;
  
  while (index < serialized.length) {
    chunks.push(serialized.slice(index, index + maxChunkSize));
    index += maxChunkSize;
  }
  
  return chunks;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤ –≤ storage
async function saveChunks(key, chunks) {
  const savePromises = chunks.map((chunk, index) => {
    return new Promise((resolve, reject) => {
      const chunkKey = `${key}_chunk_${index}`;
      chrome.storage.local.set({ [chunkKey]: chunk }, () => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve();
        }
      });
    });
  });

  await Promise.all(savePromises);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ —á–∞–Ω–∫–∞—Ö
  return new Promise((resolve, reject) => {
    chrome.storage.local.set({
      [`${key}_meta`]: {
        chunks: chunks.length,
        timestamp: Date.now()
      }
    }, () => {
      if (chrome.runtime.lastError) {
        reject(chrome.runtime.lastError);
      } else {
        resolve();
      }
    });
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
async function addToFavorites(chatTitle, messageText = '') {
  console.log('Starting addToFavorites...', { chatTitle, messageText });
  try {
    const chatContent = await getChatContent();
    console.log('Chat content retrieved:', chatContent);
    
    const favorite = {
      title: chatTitle.slice(0, 200),
      url: window.location.href,
      timestamp: new Date().toISOString(),
      description: messageText.slice(0, 500) || '',
      hasContent: true
    };
    
    console.log('Created favorite object:', favorite);
    
    await new Promise((resolve, reject) => {
      chrome.storage.sync.get(['favorites'], async (result) => {
        try {
          const favorites = result.favorites || [];
          
          if (!favorites.some(f => f.url === favorite.url)) {
            favorites.push(favorite);
            
            chrome.storage.sync.set({ favorites }, async () => {
              if (chrome.runtime.lastError) {
                console.error('Storage error:', chrome.runtime.lastError);
                reject(new Error('Storage error: ' + chrome.runtime.lastError.message));
                return;
              }
              
              try {
                const chunks = splitIntoChunks(chatContent);
                await saveChunks(favorite.timestamp, chunks);
                
                console.log('Favorite saved successfully:', favorite);
                showNotification(`Added to Favorites! ‚≠ê\n"${chatTitle}"`, false);
                resolve();
              } catch (error) {
                console.error('Error saving chat content:', error);
                reject(error);
              }
            });
          } else {
            console.log('Chat already in favorites');
            showNotification(`Already in Favorites! üîî\n"${chatTitle}"`, true);
            resolve();
          }
        } catch (error) {
          console.error('Error in storage operation:', error);
          reject(error);
        }
      });
    });
  } catch (error) {
    console.error('Error adding to favorites:', error);
    showNotification('Error saving to favorites! ‚ùå', true);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–∞—Ç–∞
function getChatTitle() {
  // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const selectors = [
    'div[class*="d8ed659a"]',
    'div[class*="chat-title"]',
    'div[class*="title"]',
    'h1',
    'div.title'
  ];

  for (const selector of selectors) {
    const element = document.querySelector(selector);
    if (element) {
      const title = element.textContent.trim();
      if (title) return title;
    }
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º URL
  return 'Chat ' + new Date().toLocaleString('en-US');
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç background script
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  console.log('Content script received message:', message);
  
  if (message.action === "addToFavorites") {
    console.log('Adding to favorites...');
    const chatTitle = getChatTitle();
    console.log('Chat title:', chatTitle);
    
    addToFavorites(chatTitle, message.selectionText)
      .then(() => {
        console.log('Successfully added to favorites');
        sendResponse({ success: true });
      })
      .catch((error) => {
        console.error('Error adding to favorites:', error);
        sendResponse({ success: false, error: error.message });
      });
    
    return true; // –í–∞–∂–Ω–æ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  }
});

// –°–æ–æ–±—â–∞–µ–º background script, —á—Ç–æ content script –∑–∞–≥—Ä—É–∂–µ–Ω
console.log('Content script loaded, sending ready message...');
chrome.runtime.sendMessage({ action: "contentScriptReady" }, (response) => {
  console.log('Ready message sent, response:', response);
}); 