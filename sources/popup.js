// –§—É–Ω–∫—Ü–∏—è debounce –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —á–∞—Ç–∞
async function loadChatContent(chatId) {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ —á–∞–Ω–∫–∞—Ö
    const meta = await new Promise((resolve, reject) => {
      chrome.storage.local.get([`${chatId}_meta`], (result) => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve(result[`${chatId}_meta`]);
        }
      });
    });

    if (!meta) {
      throw new Error('Chat content not found');
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏
    const chunkKeys = Array.from({ length: meta.chunks }, (_, i) => `${chatId}_chunk_${i}`);
    const chunks = await new Promise((resolve, reject) => {
      chrome.storage.local.get(chunkKeys, (result) => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve(Object.values(result));
        }
      });
    });

    // –°–æ–±–∏—Ä–∞–µ–º —á–∞–Ω–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É –∏ –ø–∞—Ä—Å–∏–º JSON
    const serialized = chunks.join('');
    return JSON.parse(serialized);
  } catch (error) {
    console.error('Error loading chat content:', error);
    throw error;
  }
}

document.addEventListener('DOMContentLoaded', () => {
  const favoritesList = document.getElementById('favoritesList');
  const promptsList = document.getElementById('promptsList');
  const searchInput = document.getElementById('searchInput');
  const promptSearchInput = document.getElementById('promptSearchInput');
  const favoritesTab = document.getElementById('favoritesTab');
  const promptsTab = document.getElementById('promptsTab');
  const favoritesSection = document.getElementById('favoritesSection');
  const promptsSection = document.getElementById('promptsSection');
  const addPromptBtn = document.getElementById('addPromptBtn');
  const lightThemeBtn = document.getElementById('lightTheme');
  const darkThemeBtn = document.getElementById('darkTheme');
  const exportBtn = document.getElementById('exportBtn');
  const importFile = document.getElementById('importFile');
  const clearDataBtn = document.getElementById('clearDataBtn');
  const editForm = document.getElementById('editForm');
  const editTitle = document.getElementById('editTitle');
  const editDescription = document.getElementById('editDescription');
  const editTags = document.getElementById('editTags');
  const saveEditBtn = document.getElementById('saveEdit');
  const cancelEditBtn = document.getElementById('cancelEdit');

  let currentEditingId = null;
  let currentFavorites = [];
  let currentPrompts = [];
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const DEFAULT_SETTINGS = {
    provider: 'openrouter',
    apiKeys: {
      openrouter: '',
      google: ''
    },
    model: '',
    titlePrompt: 'Come up with a name for this chat up to 50 characters. Short, clear and concise. Capture only the essence. The language of the name should match the language of the chat. Return only the name without quotes: {text}',
    summaryPrompt: 'Please generate a concise summary of this chat conversation in 2-3 sentences: {text}',
    tagsPrompt: 'Generate 3-5 relevant tags for this chat. Each tag should be 1-2 words, separated by spaces. Tags should reflect the main topics, technologies, or concepts discussed. Return only the tags without quotes or commas: {text}'
  };

  // –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const settingsBtn = document.getElementById('settingsBtn');
  const settingsModal = document.getElementById('settingsModal');
  const closeButtons = settingsModal.querySelectorAll('.settings-close');
  const saveSettingsBtn = document.getElementById('saveSettings');
  const providerSelect = document.getElementById('provider');
  const apiKeyInput = document.getElementById('apiKey');
  const modelSelect = document.getElementById('model');
  const summaryPromptInput = document.getElementById('summaryPrompt');
  const titlePromptInput = document.getElementById('titlePrompt');
  const tagsPromptInput = document.getElementById('tagsPrompt');

  // –ú–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  const PROVIDER_MODELS = {
    openrouter: [
      { value: 'google/gemini-2.0-flash-001', label: 'gemini-2.0-flash-001' },
      { value: 'deepseek/deepseek-chat', label: 'DeepSeek-V3' },
      { value: 'openai/gpt-4o-mini', label: 'GPT-4o mini' },
      { value: 'meta-llama/llama-3.3-70b-instruct', label: 'The Meta Llama 3.3' }
    ],
    google: [
      { value: 'gemini-2.0-flash-001', label: 'gemini-2.0-flash-001' },
      { value: 'gemini-2.0-flash-lite-preview-02-05', label: 'gemini-2.0-flash-lite-preview-02-05' },
      { value: 'gemini-2.0-pro-exp-02-05', label: 'gemini-2.0-pro-exp-02-05' },
      { value: 'gemini-2.0-flash-thinking-exp-01-21', label: 'gemini-2.0-flash-thinking-exp-01-21' },
      { value: 'gemini-2.0-flash-exp', label: 'gemini-2.0-flash-exp' }
    ]
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  function updateModelsList(provider) {
    const models = PROVIDER_MODELS[provider];
    const modelSelect = document.getElementById('model');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
    modelSelect.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–ø—Ü–∏–∏
    models.forEach(model => {
      const option = document.createElement('option');
      option.value = model.value;
      option.textContent = model.label;
      modelSelect.appendChild(option);
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (models.length > 0) {
      modelSelect.value = models[0].value;
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  let lastSavedSettings = null;

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  async function saveSettings() {
    const currentProvider = providerSelect.value;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö API –∫–ª—é—á–µ–π
    const currentSettings = await new Promise(resolve => {
      chrome.storage.sync.get(['settings'], result => {
        resolve(result.settings || DEFAULT_SETTINGS);
      });
    });

    const settings = {
      provider: currentProvider,
      apiKeys: {
        ...currentSettings.apiKeys,
        [currentProvider]: apiKeyInput.value.trim()
      },
      model: modelSelect.value,
      titlePrompt: titlePromptInput.value.trim() || DEFAULT_SETTINGS.titlePrompt,
      summaryPrompt: summaryPromptInput.value.trim() || DEFAULT_SETTINGS.summaryPrompt,
      tagsPrompt: tagsPromptInput.value.trim() || DEFAULT_SETTINGS.tagsPrompt
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    if (!settings.apiKeys[currentProvider]) {
      showNotification('Please enter your API key', true);
      apiKeyInput.focus();
      return;
    }

    try {
      await chrome.storage.sync.set({ settings });
      lastSavedSettings = settings;
      showNotification('Settings saved successfully! üéâ');
      settingsModal.classList.remove('active');
    } catch (error) {
      console.error('Error saving settings:', error);
      showNotification('Failed to save settings. Please try again.', true);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  function showNotification(message, isError = false) {
    const notification = document.createElement('div');
    notification.textContent = message;
    notification.className = `notification ${isError ? 'error' : 'success'}`;
    
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
      notification.classList.add('show');
    }, 100);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  settingsBtn.addEventListener('click', () => {
    loadSettings();
    settingsModal.classList.add('active');
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  closeButtons.forEach(button => {
    button.addEventListener('click', () => {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (lastSavedSettings) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
        providerSelect.value = lastSavedSettings.provider;
        updateModelsList(lastSavedSettings.provider);
        apiKeyInput.value = lastSavedSettings.apiKeys[lastSavedSettings.provider] || '';
        modelSelect.value = lastSavedSettings.model;
        titlePromptInput.value = lastSavedSettings.titlePrompt;
        summaryPromptInput.value = lastSavedSettings.summaryPrompt;
        tagsPromptInput.value = lastSavedSettings.tagsPrompt;
      }
      settingsModal.classList.remove('active');
    });
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–∫–Ω–∞
  settingsModal.addEventListener('click', (e) => {
    if (e.target === settingsModal) {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (lastSavedSettings) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
        providerSelect.value = lastSavedSettings.provider;
        updateModelsList(lastSavedSettings.provider);
        apiKeyInput.value = lastSavedSettings.apiKeys[lastSavedSettings.provider] || '';
        modelSelect.value = lastSavedSettings.model;
        titlePromptInput.value = lastSavedSettings.titlePrompt;
        summaryPromptInput.value = lastSavedSettings.summaryPrompt;
        tagsPromptInput.value = lastSavedSettings.tagsPrompt;
      }
      settingsModal.classList.remove('active');
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à –¥–ª—è —Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
  settingsModal.addEventListener('keydown', async (e) => {
    if (e.key === 'Enter' && e.ctrlKey) {
      await saveSettings();
    } else if (e.key === 'Escape') {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (lastSavedSettings) {
        await chrome.storage.sync.set({ settings: lastSavedSettings });
        loadSettings();
      }
        settingsModal.classList.remove('active');
    }
  });

  saveSettingsBtn.addEventListener('click', saveSettings);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏
  async function generateSummary(text) {
    try {
      const settings = await new Promise(resolve => {
        chrome.storage.sync.get(['settings'], result => {
          resolve(result.settings || DEFAULT_SETTINGS);
        });
      });

      if (!settings.apiKeys[settings.provider]) {
        throw new Error('API key not found. Please add it in Settings.');
      }

      let response;
      let summary;

      if (settings.provider === 'google') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Google AI API
        const apiVersion = settings.model === 'gemini-pro' ? 'v1' : 'v1beta';
        const modelId = settings.model === 'gemini-pro' ? 'gemini-pro' : settings.model;
        
        response = await fetch(`https://generativelanguage.googleapis.com/${apiVersion}/models/${modelId}:generateContent?key=${settings.apiKeys[settings.provider]}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            contents: [{
              parts: [{
                text: settings.summaryPrompt.replace('{text}', text)
              }]
            }]
          })
        });

        if (!response.ok) {
          const error = await response.json();
          console.error('Google AI API error:', error);
          throw new Error(error.error?.message || 'Failed to generate summary');
        }

        const data = await response.json();
        console.log('Google AI API response:', data);

        if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
          console.error('Invalid Google AI response format:', data);
          throw new Error('Invalid response format from Google AI');
        }

        const content = data.candidates[0].content;
        if (!content.parts || !content.parts[0] || !content.parts[0].text) {
          console.error('Missing text in Google AI response:', content);
          throw new Error('No text generated from Google AI');
        }

        summary = content.parts[0].text;
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter API
        response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${settings.apiKeys[settings.provider]}`,
            'HTTP-Referer': 'https://github.com/your-username/deepseek-favorites',
            'X-Title': 'DeepSeek Favorites Extension'
          },
          body: JSON.stringify({
            model: settings.model,
            messages: [
              {
                role: 'user',
                content: settings.summaryPrompt.replace('{text}', text)
              }
            ]
          })
        });

        if (!response.ok) {
          const error = await response.json();
          console.error('OpenRouter API error:', error);
          throw new Error(error.message || `API error: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        console.log('OpenRouter API response:', data);

        if (!data || !data.choices) {
          console.error('Invalid API response format:', data);
          throw new Error('Invalid API response format - missing choices array');
        }

        if (data.choices.length === 0) {
          console.error('Empty choices array in response:', data);
          throw new Error('No response generated from the model');
        }

        const firstChoice = data.choices[0];
        if (!firstChoice || !firstChoice.message) {
          console.error('Invalid choice format:', firstChoice);
          throw new Error('Invalid response format - missing message');
        }

        summary = firstChoice.message.content;
        if (!summary) {
          console.error('Empty content in response:', firstChoice);
          throw new Error('Empty response from the model');
        }
      }

      return summary;
    } catch (error) {
      console.error('Error generating summary:', error);
      throw new Error(`Failed to generate summary: ${error.message}`);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–º—ã
  function setTheme(theme) {
    document.body.setAttribute('data-theme', theme);
    chrome.storage.sync.set({ theme });
    
    if (theme === 'light') {
      lightThemeBtn.classList.add('active');
      darkThemeBtn.classList.remove('active');
    } else {
      darkThemeBtn.classList.add('active');
      lightThemeBtn.classList.remove('active');
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
  chrome.storage.sync.get(['theme'], (result) => {
    const savedTheme = result.theme || 'light';
    setTheme(savedTheme);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
  lightThemeBtn.addEventListener('click', () => setTheme('light'));
  darkThemeBtn.addEventListener('click', () => setTheme('dark'));
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ–≥–æ popup

  
  // –î–æ–±–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
  function showNoFavorites() {
    favoritesList.innerHTML = '<div class="no-favorites">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤</div>';
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  function createEditForm(favorite) {
    console.log('Creating edit form for favorite:', favorite);
    const form = document.createElement('div');
    form.className = 'edit-form';
    form.innerHTML = `
      <div class="form-group">
        <div class="label-with-button">
          <label for="editTitle_${favorite.timestamp}">Title</label>
          <button type="button" class="generate-btn generate-title-btn" title="Generate Title with AI">üìù</button>
        </div>
        <input type="text" id="editTitle_${favorite.timestamp}" class="edit-title" placeholder="Enter title" value="${favorite.title || ''}">
      </div>
      <div class="form-group">
        <div class="label-with-button">
          <label for="editTags_${favorite.timestamp}">Tags</label>
          <button type="button" class="generate-btn generate-tags-btn" title="Generate Tags with AI">üìù</button>
        </div>
        <input type="text" id="editTags_${favorite.timestamp}" class="edit-tags" placeholder="Add space-separated tags" value="${(favorite.tags || []).join(' ')}">
      </div>
      <div class="form-group">
        <div class="label-with-button">
          <label for="editDescription_${favorite.timestamp}">Description</label>
          <button type="button" class="generate-btn generate-desc-btn" title="Generate Summary with AI">üìù</button>
        </div>
        <textarea id="editDescription_${favorite.timestamp}" class="edit-description" placeholder="Add chat description">${favorite.description || ''}</textarea>
      </div>
      <div class="button-group">
        <button type="button" class="btn btn-secondary cancel-edit" data-action="cancel">Cancel</button>
        <button type="button" class="btn btn-primary save-edit" data-action="save">Save</button>
      </div>
    `;

    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
    const saveButton = form.querySelector('[data-action="save"]');
    const cancelButton = form.querySelector('[data-action="cancel"]');
    const generateTitleButton = form.querySelector('.generate-title-btn');
    const generateTagsButton = form.querySelector('.generate-tags-btn');
    const generateDescButton = form.querySelector('.generate-desc-btn');
    const titleInput = form.querySelector('.edit-title');
    const tagsInput = form.querySelector('.edit-tags');
    const descriptionInput = form.querySelector('.edit-description');

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const handleSave = () => {
      const newTitle = titleInput.value.trim();
      const newTags = tagsInput.value.trim().split(/\s+/).filter(Boolean);
      const newDescription = descriptionInput.value.trim();

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      const newFavorites = currentFavorites.map(f => {
        if (f.timestamp === favorite.timestamp) {
          return {
            ...f,
            title: newTitle,
            tags: newTags,
            description: newDescription
          };
        }
        return f;
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      chrome.storage.sync.set({ favorites: newFavorites }, () => {
        currentFavorites = newFavorites;
        hideEditForm();
        filterFavorites(searchInput.value);
        showNotification('Changes saved successfully!');
      });
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const handleCancel = () => {
      hideEditForm();
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    saveButton.addEventListener('click', handleSave);
    cancelButton.addEventListener('click', handleCancel);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
    generateTitleButton.addEventListener('click', async () => {
      generateTitleButton.classList.add('loading');
      generateTitleButton.innerHTML = '‚åõ';
      try {
        const chatData = await loadChatContent(favorite.timestamp);
        const chatText = chatData.map(message => {
          const role = message.type === 'question' ? 'User' : 'Assistant';
          return `${role}: ${message.content}`;
        }).join('\n\n');

        const title = await generateTitle(chatText);
        if (title) {
          titleInput.value = title;
        }
      } catch (error) {
        console.error('Error generating title:', error);
        showNotification(error.message || 'Failed to generate title. Please try again.', true);
      } finally {
        generateTitleButton.classList.remove('loading');
        generateTitleButton.innerHTML = 'üìù';
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤
    generateTagsButton.addEventListener('click', async () => {
      generateTagsButton.classList.add('loading');
      generateTagsButton.innerHTML = '‚åõ';
      try {
        const chatData = await loadChatContent(favorite.timestamp);
        const chatText = chatData.map(message => {
          const role = message.type === 'question' ? 'User' : 'Assistant';
          return `${role}: ${message.content}`;
        }).join('\n\n');

        const tags = await generateTags(chatText);
        if (tags) {
          tagsInput.value = tags;
          showNotification('Tags generated successfully!');
        }
      } catch (error) {
        console.error('Error generating tags:', error);
        showNotification(error.message || 'Failed to generate tags. Please try again.', true);
      } finally {
        generateTagsButton.classList.remove('loading');
        generateTagsButton.innerHTML = 'üìù';
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary
    generateDescButton.addEventListener('click', async () => {
      generateDescButton.classList.add('loading');
      generateDescButton.innerHTML = '‚åõ';
      try {
        const chatData = await loadChatContent(favorite.timestamp);
        const chatText = chatData.map(message => {
          const role = message.type === 'question' ? 'User' : 'Assistant';
          return `${role}: ${message.content}`;
        }).join('\n\n');

        const summary = await generateSummary(chatText);
        if (summary) {
          descriptionInput.value = summary;
          await navigator.clipboard.writeText(summary);
          showNotification('Summary generated and copied to clipboard!');
        }
      } catch (error) {
        console.error('Error generating summary:', error);
        showNotification(error.message || 'Failed to generate summary. Please try again.', true);
      } finally {
        generateDescButton.classList.remove('loading');
        generateDescButton.innerHTML = 'üìù';
      }
    });

    return form;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  function showEditForm(chatElement, favorite) {
    console.log('Showing edit form for:', { chatElement, favorite });
    
    if (!chatElement || !favorite) {
      console.error('Invalid arguments for showEditForm:', { chatElement, favorite });
      return;
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–æ—Ä–º—ã
    const openForms = document.querySelectorAll('.edit-form');
    openForms.forEach(form => form.remove());
    
    currentEditingId = favorite.timestamp;
    const form = createEditForm(favorite);
    
    if (!form) {
      console.error('Failed to create edit form');
      return;
    }

    const chatItemElement = chatElement.querySelector('.chat-item');
    if (!chatItemElement) {
      console.error('Chat item element not found');
      return;
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –ø–µ—Ä–µ–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–º —á–∞—Ç–∞
    chatItemElement.before(form);
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    const titleInput = form.querySelector('.edit-title');
    if (titleInput) {
      titleInput.focus();
    } else {
      console.error('Title input not found in form');
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  function hideEditForm() {
    const form = document.querySelector('.edit-form');
    if (form) {
      closeFormWithAnimation(form);
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  function filterFavorites(query) {
    query = query.toLowerCase().trim();
    
    if (!query) {
      renderFavorites(currentFavorites);
      return;
    }

    const filtered = currentFavorites.filter(favorite => {
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å #, –∏—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–≥–∞–º
      if (query.startsWith('#')) {
        const searchTag = query.slice(1); // –£–±–∏—Ä–∞–µ–º # –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        return favorite.tags && favorite.tags.some(tag => tag.toLowerCase() === searchTag);
      }
      
      // –ò–Ω–∞—á–µ –∏—â–µ–º –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º
      const titleMatch = (favorite.title || '').toLowerCase().includes(query);
      const descriptionMatch = (favorite.description || '').toLowerCase().includes(query);
      const tagMatch = favorite.tags && favorite.tags.some(tag => 
        tag.toLowerCase().includes(query) || 
        ('#' + tag.toLowerCase()).includes(query)
      );
      
      return titleMatch || descriptionMatch || tagMatch;
    });

    renderFavorites(filtered);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å debounce
  searchInput.addEventListener('input', debounce((e) => {
    filterFavorites(e.target.value);
  }, 300));
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  favoritesList.addEventListener('click', (e) => {
    console.log('Click event on favoritesList, target:', e.target);
    
    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –∫–Ω–æ–ø–∫—É –æ—Ç –º–µ—Å—Ç–∞ –∫–ª–∏–∫–∞
    const editBtn = e.target.closest('.edit-btn');
    const pinBtn = e.target.closest('.pin-btn');
    const deleteBtn = e.target.closest('.delete-btn');
    
    // –ï—Å–ª–∏ –∫–ª–∏–∫ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ - –≤—ã—Ö–æ–¥–∏–º
    if (!editBtn && !pinBtn && !deleteBtn) return;
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
    e.preventDefault();
    e.stopPropagation();
    
    // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —á–∞—Ç–∞ –∏ –µ–≥–æ timestamp
    const chatElement = (editBtn || pinBtn || deleteBtn).closest('.favorite-chat');
    const timestamp = chatElement.getAttribute('data-timestamp');
    const favorite = currentFavorites.find(f => f.timestamp === timestamp);
    
    if (!favorite) {
      console.error('Favorite not found for timestamp:', timestamp);
      return;
    }
    
    console.log('Processing click for favorite:', favorite);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (editBtn) {
      console.log('Edit button clicked for favorite:', favorite);
      showEditForm(chatElement, favorite);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
    if (pinBtn) {
      console.log('Pin button clicked for favorite:', favorite);
      const newPinned = !favorite.pinned;
      const newFavorites = currentFavorites.map(f => {
        if (f.timestamp === timestamp) {
          return { 
            ...f, 
            pinned: newPinned,
            pinnedOrder: newPinned ? currentFavorites.filter(x => x.pinned).length : undefined
          };
        }
        return f;
      });
      
      chrome.storage.sync.set({ favorites: newFavorites }, () => {
        currentFavorites = newFavorites;
        filterFavorites(searchInput.value);
      });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è
    if (deleteBtn) {
      console.log('Delete button clicked for favorite:', favorite);
      const newFavorites = currentFavorites.filter(f => f.timestamp !== favorite.timestamp);
          chrome.storage.sync.set({ favorites: newFavorites }, () => {
            currentFavorites = newFavorites;
            filterFavorites(searchInput.value);
          });
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  function renderFavorites(favorites) {
    if (!favorites || favorites.length === 0) {
      showNoFavorites();
      return;
    }
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    favoritesList.innerHTML = '';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    updatePopularTags(favorites, favoritesSection, searchInput);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ (–ø–æ –ø–æ—Ä—è–¥–∫—É), –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    const sortedFavorites = [...favorites].sort((a, b) => {
      if (a.pinned && !b.pinned) return -1;
      if (!a.pinned && b.pinned) return 1;
      if (a.pinned && b.pinned) {
        return (a.pinnedOrder || 0) - (b.pinnedOrder || 0);
      }
      return new Date(b.timestamp) - new Date(a.timestamp);
    });

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    const pinnedContainer = document.createElement('div');
    pinnedContainer.className = 'pinned-container';
    favoritesList.appendChild(pinnedContainer);

    const unpinnedContainer = document.createElement('div');
    unpinnedContainer.className = 'unpinned-container';
    favoritesList.appendChild(unpinnedContainer);

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    function updatePinnedOrder() {
      const pinnedChats = Array.from(pinnedContainer.children);
      const newOrder = {};
      
      pinnedChats.forEach((chat, index) => {
        const timestamp = chat.getAttribute('data-timestamp');
        newOrder[timestamp] = index;
      });

      const newFavorites = currentFavorites.map(f => ({
        ...f,
        pinnedOrder: f.pinned ? newOrder[f.timestamp] : undefined
      }));

      chrome.storage.sync.set({ favorites: newFavorites }, () => {
        currentFavorites = newFavorites;
      });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ–ª–æ–º—É —Å–ª–æ–≤—É
    function truncateText(text, maxLength) {
      if (!text || text.length <= maxLength) return text;
      
      // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
      let truncated = text.substr(0, maxLength);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –æ–±—Ä–µ–∑–∫–æ–π
      const lastSpace = truncated.lastIndexOf(' ');
      
      // –û–±—Ä–µ–∑–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ü–µ–ª–æ–º—É —Å–ª–æ–≤—É
      if (lastSpace > -1) {
        truncated = truncated.substr(0, lastSpace);
      }
      
      return truncated + '...';
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è
    function sanitizeDescription(desc) {
      if (!desc) return '';
      // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ
      const descriptions = desc.split('\n').map(d => d.trim()).filter(Boolean);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
      return [...new Set(descriptions)].join('\n');
    }
    
    sortedFavorites.forEach(favorite => {
      const chatElement = document.createElement('div');
      chatElement.className = 'favorite-chat';
      chatElement.setAttribute('data-timestamp', favorite.timestamp);
      
      if (favorite.pinned) {
        chatElement.setAttribute('draggable', 'true');
      }
      
      const chatTime = new Date(favorite.timestamp).toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      // –û—á–∏—â–∞–µ–º –∏ –æ–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è title –∞—Ç—Ä–∏–±—É—Ç–∞
      const description = sanitizeDescription(favorite.description);
      const truncatedDescription = description ? truncateText(description, 150) : '';
      const tooltipText = description ? renderHTML(description) : ''; // –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç—É–ª—Ç–∏–ø–∞
      
      chatElement.innerHTML = `
        <div class="chat-item ${favorite.pinned ? 'pinned' : ''}">
          <div class="chat-header">
            <a href="${favorite.url}" target="_blank" class="chat-title">
              ${favorite.pinned ? 'üìå ' : ''}${escapeHtml(favorite.title || 'Untitled')}
            </a>
            <div class="button-group">
              <button type="button" class="pin-btn" title="${favorite.pinned ? 'Unpin' : 'Pin'}">${favorite.pinned ? 'üìå' : 'üìç'}</button>
              <button type="button" class="edit-btn" title="Edit">‚úé</button>
              <button type="button" class="delete-btn" title="Delete">√ó</button>
            </div>
          </div>
          <div class="chat-time">${chatTime}</div>
          ${description ? `<div class="description" title="${escapeHtml(tooltipText)}">${truncatedDescription}</div>` : ''}
          ${favorite.tags && favorite.tags.length > 0 ? 
            `<div class="prompt-tags">${favorite.tags.map(tag => `<span class="tag">#${escapeHtml(tag)}</span>`).join(' ')}</div>` 
            : ''}
          <button type="button" class="chat-btn" title="View Chat History">üí¨ Chat</button>
        </div>
      `;

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
      const chatBtn = chatElement.querySelector('.chat-btn');
      const pinBtn = chatElement.querySelector('.pin-btn');
      const editBtn = chatElement.querySelector('.edit-btn');
      const deleteBtn = chatElement.querySelector('.delete-btn');

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Chat
      chatBtn.addEventListener('click', () => {
        console.log('Opening chat window for:', favorite);
        chrome.windows.create({
          url: `chat-viewer.html?id=${favorite.timestamp}`,
          type: 'popup',
          width: 800,
          height: 600
        });
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Pin
      pinBtn.addEventListener('click', () => {
        const newPinned = !favorite.pinned;
        const newFavorites = currentFavorites.map(f => {
          if (f.timestamp === favorite.timestamp) {
            return { 
              ...f, 
              pinned: newPinned,
              pinnedOrder: newPinned ? currentFavorites.filter(x => x.pinned).length : undefined
            };
          }
          return f;
        });
        
        chrome.storage.sync.set({ favorites: newFavorites }, () => {
          currentFavorites = newFavorites;
          filterFavorites(searchInput.value);
        });
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Edit
      editBtn.addEventListener('click', () => {
        console.log('Edit button clicked for favorite:', favorite);
        showEditForm(chatElement, favorite);
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Delete
      deleteBtn.addEventListener('click', () => {
          const newFavorites = currentFavorites.filter(f => f.timestamp !== favorite.timestamp);
          chrome.storage.sync.set({ favorites: newFavorites }, () => {
            currentFavorites = newFavorites;
            filterFavorites(searchInput.value);
          });
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è drag and drop
      if (favorite.pinned) {
        chatElement.addEventListener('dragstart', handleDragStart);
        chatElement.addEventListener('dragend', handleDragEnd);
        chatElement.addEventListener('dragover', (e) => {
          e.preventDefault();
          const draggingElement = document.querySelector('.dragging');
          if (!draggingElement || draggingElement === chatElement) return;

          const rect = chatElement.getBoundingClientRect();
          const midY = rect.top + rect.height / 2;
          
          if (e.clientY < midY) {
            pinnedContainer.insertBefore(draggingElement, chatElement);
          } else {
            pinnedContainer.insertBefore(draggingElement, chatElement.nextSibling);
          }
        });
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      if (favorite.pinned) {
        pinnedContainer.appendChild(chatElement);
      } else {
        unpinnedContainer.appendChild(chatElement);
      }
    });
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
  chrome.storage.sync.get(['favorites'], (result) => {
    console.log('Loaded favorites:', result.favorites);
    currentFavorites = result.favorites || [];
    renderFavorites(currentFavorites);
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ .json —Ñ–∞–π–ª
  async function exportToJson(favorites, prompts, settings) {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Ç–æ–≤ –∏–∑ local storage
    const chatContents = {};
    for (const favorite of favorites) {
      try {
        const meta = await new Promise((resolve) => {
          chrome.storage.local.get([`${favorite.timestamp}_meta`], (result) => {
            resolve(result[`${favorite.timestamp}_meta`]);
          });
        });

        if (meta) {
          const chunkKeys = Array.from({ length: meta.chunks }, (_, i) => `${favorite.timestamp}_chunk_${i}`);
          const chunks = await new Promise((resolve) => {
            chrome.storage.local.get(chunkKeys, (result) => {
              resolve(Object.values(result));
            });
          });
          
          chatContents[favorite.timestamp] = {
            meta,
            content: chunks.join('')
          };
        }
      } catch (error) {
        console.error(`Error exporting chat content for ${favorite.timestamp}:`, error);
      }
    }

    const exportData = {
      version: "1.0",
      exportDate: new Date().toISOString(),
      theme: document.body.getAttribute('data-theme') || 'light',
      settings: settings || DEFAULT_SETTINGS,
      favorites: favorites.map(favorite => ({
        title: favorite.title || 'Untitled',
        url: favorite.url,
        timestamp: favorite.timestamp,
        description: favorite.description || '',
        pinned: favorite.pinned || false,
        pinnedOrder: favorite.pinnedOrder,
        tags: favorite.tags || [],
        chatContent: chatContents[favorite.timestamp] || null
      })),
      prompts: prompts.map(prompt => ({
        id: prompt.id,
        title: prompt.title || 'Untitled',
        text: prompt.text,
        tags: prompt.tags || [],
        createdAt: prompt.createdAt,
        pinned: prompt.pinned || false,
        pinnedOrder: prompt.pinnedOrder
      }))
    };
    
    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `deepseek-backup-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
  exportBtn.addEventListener('click', () => {
    chrome.storage.sync.get(['favorites', 'prompts', 'settings'], (result) => {
      const favorites = result.favorites || [];
      const prompts = result.prompts || [];
      const settings = result.settings || DEFAULT_SETTINGS;
      exportToJson(favorites, prompts, settings);
    });
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ .json —Ñ–∞–π–ª–∞
  function importFromJson(content) {
    try {
      const importData = JSON.parse(content);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
      if (!importData.favorites && !importData.prompts) {
        throw new Error('Invalid file format: missing favorites or prompts array');
      }
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      let validatedFavorites = [];
      let chatContents = [];
      if (importData.favorites && Array.isArray(importData.favorites)) {
        validatedFavorites = importData.favorites.map(favorite => {
          if (!favorite.url) {
            throw new Error('Invalid favorite: missing URL');
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
          if (favorite.chatContent) {
            chatContents.push({
              timestamp: favorite.timestamp,
              content: favorite.chatContent
            });
          }
          
          // –£–¥–∞–ª—è–µ–º chatContent –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
          const { chatContent, ...favoriteData } = favorite;
          return {
            title: favoriteData.title || 'Untitled',
            url: favoriteData.url,
            timestamp: favoriteData.timestamp || new Date().toISOString(),
            description: favoriteData.description || '',
            pinned: Boolean(favoriteData.pinned),
            pinnedOrder: favoriteData.pinnedOrder,
            tags: favoriteData.tags || []
          };
        });
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–º–ø—Ç—ã
      let validatedPrompts = [];
      if (importData.prompts && Array.isArray(importData.prompts)) {
        validatedPrompts = importData.prompts.map(prompt => {
          if (!prompt.text) {
            throw new Error('Invalid prompt: missing text');
          }
          
          return {
            id: prompt.id || Date.now().toString(),
            title: prompt.title || 'Untitled',
            text: prompt.text,
            tags: prompt.tags || [],
            createdAt: prompt.createdAt || new Date().toISOString(),
            pinned: Boolean(prompt.pinned),
            pinnedOrder: prompt.pinnedOrder
          };
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const validatedSettings = importData.settings ? {
        provider: importData.settings.provider || DEFAULT_SETTINGS.provider,
        apiKeys: {
          ...DEFAULT_SETTINGS.apiKeys,
          ...importData.settings.apiKeys
        },
        model: importData.settings.model || DEFAULT_SETTINGS.model,
        summaryPrompt: importData.settings.summaryPrompt || DEFAULT_SETTINGS.summaryPrompt,
        titlePrompt: importData.settings.titlePrompt || DEFAULT_SETTINGS.titlePrompt,
        tagsPrompt: importData.settings.tagsPrompt || DEFAULT_SETTINGS.tagsPrompt
      } : DEFAULT_SETTINGS;
      
      return {
        theme: importData.theme || 'light',
        settings: validatedSettings,
        favorites: validatedFavorites,
        prompts: validatedPrompts,
        chatContents: chatContents
      };
    } catch (error) {
      console.error('Error parsing import file:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON.');
      return { 
        theme: 'light', 
        settings: DEFAULT_SETTINGS, 
        favorites: [], 
        prompts: [],
        chatContents: []
      };
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–ø–æ—Ä—Ç–∞
  importFile.addEventListener('change', (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = async (e) => {
      try {
        const content = e.target.result;
        const imported = importFromJson(content);
        
        if (imported.favorites.length === 0 && imported.prompts.length === 0) return;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        chrome.storage.sync.get(['favorites', 'prompts'], async (result) => {
          const existingFavorites = result.favorites || [];
          const existingPrompts = result.prompts || [];

          // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –∑–∞–∫–ª–∞–¥–∫–∏ –∏ –ø—Ä–æ–º–ø—Ç—ã
          const newFavorites = imported.favorites.filter(imported => 
            !existingFavorites.some(current => current.url === imported.url)
          );
          const newPrompts = imported.prompts.filter(imported => 
            !existingPrompts.some(current => current.id === imported.id)
          );

          // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
          const updatedFavorites = [...existingFavorites, ...newFavorites];
          const updatedPrompts = [...existingPrompts, ...newPrompts];

          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Ç–æ–≤ –≤ local storage
          for (const chatContent of imported.chatContents) {
            if (chatContent.content && chatContent.content.meta && chatContent.content.content) {
              try {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                await new Promise((resolve, reject) => {
                  chrome.storage.local.set({
                    [`${chatContent.timestamp}_meta`]: chatContent.content.meta
                  }, () => {
                    if (chrome.runtime.lastError) reject(chrome.runtime.lastError);
                    else resolve();
                  });
                });

                // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —á–∞–Ω–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                const content = chatContent.content.content;
                const chunkSize = 8000; // –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
                const chunks = [];
                
                for (let i = 0; i < content.length; i += chunkSize) {
                  chunks.push(content.slice(i, i + chunkSize));
                }

                await Promise.all(chunks.map((chunk, index) => {
                  return new Promise((resolve, reject) => {
                    chrome.storage.local.set({
                      [`${chatContent.timestamp}_chunk_${index}`]: chunk
                    }, () => {
                      if (chrome.runtime.lastError) reject(chrome.runtime.lastError);
                      else resolve();
                    });
                  });
                }));
              } catch (error) {
                console.error(`Error importing chat content for ${chatContent.timestamp}:`, error);
              }
            }
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–µ–º—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          chrome.storage.sync.set({ 
            favorites: updatedFavorites,
            prompts: updatedPrompts,
            theme: imported.theme,
            settings: imported.settings
          }, () => {
            // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
            searchInput.value = '';
            promptSearchInput.value = '';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
            currentFavorites = updatedFavorites;
            currentPrompts = updatedPrompts;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É
            setTheme(imported.theme);

            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–æ—Ä–º–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            loadSettings();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            renderFavorites(currentFavorites);
            renderPrompts(currentPrompts);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–º–ø–æ—Ä—Ç–µ
            let message = [];
            if (newFavorites.length > 0) {
              message.push(`${newFavorites.length} new favorites`);
            }
            if (newPrompts.length > 0) {
              message.push(`${newPrompts.length} new prompts`);
            }
            if (imported.chatContents.length > 0) {
              message.push(`${imported.chatContents.length} chat histories`);
            }
            message.push('settings');
            
            if (message.length > 0) {
              alert(`Successfully imported: ${message.join(', ')}`);
            } else {
              alert('All imported items already exist in the list');
            }
          });
        });
      } catch (error) {
        console.error('Error during import:', error);
        alert('Error during import. Check console for details.');
      }
    };
    reader.readAsText(file);
    // –û—á–∏—â–∞–µ–º input file, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ
    event.target.value = '';
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
  function filterPrompts(query) {
    chrome.storage.sync.get(['prompts'], (result) => {
      const prompts = result.prompts || [];
      query = query.toLowerCase().trim();
      
      if (!query) {
        renderPrompts(prompts);
        return;
      }

      const filtered = prompts.filter(prompt => {
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å #, –∏—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–≥–∞–º
        if (query.startsWith('#')) {
          const searchTag = query.slice(1); // –£–±–∏—Ä–∞–µ–º # –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
          return prompt.tags && prompt.tags.some(tag => tag.toLowerCase() === searchTag);
        }
        
        // –ò–Ω–∞—á–µ –∏—â–µ–º –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º
        const titleMatch = prompt.title.toLowerCase().includes(query);
        const textMatch = prompt.text.toLowerCase().includes(query);
        const tagMatch = prompt.tags && prompt.tags.some(tag => 
          tag.toLowerCase().includes(query) || 
          ('#' + tag.toLowerCase()).includes(query)
        );
        
        return titleMatch || textMatch || tagMatch;
      });

      renderPrompts(filtered);
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ —Å debounce
  promptSearchInput.addEventListener('input', debounce((e) => {
    filterPrompts(e.target.value);
  }, 300));

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–≥–æ–≤
  document.addEventListener('click', (e) => {
    const tag = e.target.closest('.tag');
    if (!tag) return;

    const section = tag.closest('.section');
    if (!section) return;

    const tagText = tag.textContent.trim(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–≥–∞
    const searchQuery = tagText.startsWith('#') ? tagText : '#' + tagText; // –î–æ–±–∞–≤–ª—è–µ–º # –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    
    if (section.id === 'promptsSection') {
      promptSearchInput.value = searchQuery;
      filterPrompts(searchQuery); // –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    } else if (section.id === 'favoritesSection') {
      searchInput.value = searchQuery;
      filterFavorites(searchQuery); // –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
  promptsList.addEventListener('click', (e) => {
    const button = e.target.closest('.prompt-btn');
    if (!button) return;

    const promptActions = button.closest('.prompt-actions');
    const promptId = promptActions.dataset.id;
    const promptElement = button.closest('.prompt-item');

    chrome.storage.sync.get(['prompts'], (result) => {
      const prompts = result.prompts || [];
      const prompt = prompts.find(p => p.id === promptId);
      
      if (!prompt) {
        console.error('Prompt not found:', promptId);
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
      if (button.classList.contains('pin-prompt')) {
        const newPinned = !prompt.pinned;
        const newPrompts = prompts.map(p => {
          if (p.id === promptId) {
            return {
              ...p,
              pinned: newPinned,
              pinnedOrder: newPinned ? prompts.filter(x => x.pinned).length : undefined
            };
          }
          return p;
        });

        chrome.storage.sync.set({ prompts: newPrompts }, () => {
          renderPrompts(newPrompts);
        });
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      else if (button.classList.contains('edit-prompt')) {
        chrome.windows.create({
          url: 'prompt-editor.html?id=' + promptId,
          type: 'popup',
          width: 600,
          height: 580
        });
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è
      else if (button.classList.contains('delete-prompt')) {
        if (confirm('Are you sure you want to delete this prompt?')) {
          const newPrompts = prompts.filter(p => p.id !== promptId);
          chrome.storage.sync.set({ prompts: newPrompts }, () => {
            renderPrompts(newPrompts);
          });
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
      else if (button.classList.contains('copy-prompt')) {
        navigator.clipboard.writeText(prompt.text).then(() => {
          const originalText = button.textContent;
          button.textContent = '‚úì Copied';
          setTimeout(() => {
            button.textContent = originalText;
          }, 2000);
        });
      }
    });
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
  addPromptBtn.addEventListener('click', () => {
    chrome.windows.create({
      url: 'prompt-editor.html',
      type: 'popup',
      width: 600,
      height: 580
    });
  });

  // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  chrome.storage.onChanged.addListener((changes, namespace) => {
    if (namespace === 'sync' && changes.prompts) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
      if (promptsSection.classList.contains('active')) {
        renderPrompts(changes.prompts.newValue || []);
      }
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
  function switchTab(tab, section) {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ –∏ —Å–µ–∫—Ü–∏–π
    document.querySelectorAll('.tab-btn').forEach(t => t.classList.remove('active'));
    document.querySelectorAll('.section').forEach(s => s.classList.remove('active'));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ –∏ —Å–µ–∫—Ü–∏–∏
    tab.classList.add('active');
    section.classList.add('active');

    // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
    if (section === promptsSection) {
      loadPrompts();
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
  favoritesTab.addEventListener('click', () => switchTab(favoritesTab, favoritesSection));
  promptsTab.addEventListener('click', () => switchTab(promptsTab, promptsSection));

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
  function loadPrompts() {
    chrome.storage.sync.get(['prompts'], (result) => {
      const prompts = result.prompts || [];
      renderPrompts(prompts);
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–≥–æ–≤
  function updatePopularTags(prompts, container, searchInput, maxTags = 8) {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–≥–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    let popularTagsContainer = container.querySelector('.popular-tags');
    if (!popularTagsContainer) {
      popularTagsContainer = document.createElement('div');
      popularTagsContainer.className = 'popular-tags';
      // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
      searchInput.parentNode.after(popularTagsContainer);
    }

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –∏ –∏—Ö —á–∞—Å—Ç–æ—Ç—É
    const tagFrequency = {};
    prompts.forEach(item => {
      if (item.tags) {
        item.tags.forEach(tag => {
          tagFrequency[tag] = (tagFrequency[tag] || 0) + 1;
        });
      }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏ –±–µ—Ä–µ–º —Ç–æ–ø-N
    const popularTags = Object.entries(tagFrequency)
      .sort((a, b) => b[1] - a[1])
      .slice(0, maxTags)
      .map(([tag]) => tag);

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏
    popularTagsContainer.innerHTML = popularTags.length > 0
      ? `<div class="popular-tags-label">Popular tags:</div>
         <div class="popular-tags-list">
           ${popularTags.map(tag => `<span class="tag popular-tag">#${tag}</span>`).join('')}
         </div>`
      : '';
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é renderPrompts
  function renderPrompts(prompts) {
    promptsList.innerHTML = '';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏
    updatePopularTags(prompts, promptsSection, promptSearchInput);
    
    if (prompts.length === 0) {
      promptsList.innerHTML = '<div class="no-prompts">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤</div>';
      return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    const sortedPrompts = [...prompts].sort((a, b) => {
      if (a.pinned && !b.pinned) return -1;
      if (!a.pinned && b.pinned) return 1;
      if (a.pinned && b.pinned) {
        return (a.pinnedOrder || 0) - (b.pinnedOrder || 0);
      }
      return 0;
    });

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∏ –æ–±—ã—á–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    const pinnedContainer = document.createElement('div');
    pinnedContainer.className = 'pinned-container';
    const unpinnedContainer = document.createElement('div');
    unpinnedContainer.className = 'unpinned-container';
    promptsList.appendChild(pinnedContainer);
    promptsList.appendChild(unpinnedContainer);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ HTML —Ç–µ–≥–æ–≤
    function stripHtml(html) {
      const tmp = document.createElement('div');
      tmp.innerHTML = html;
      return tmp.textContent || tmp.innerText || '';
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞
    function truncateText(text, maxLength) {
      return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    function updatePinnedOrder() {
      const pinnedPrompts = Array.from(pinnedContainer.children);
      const newOrder = {};
      
      pinnedPrompts.forEach((prompt, index) => {
        const promptId = prompt.querySelector('.prompt-actions').dataset.id;
        newOrder[promptId] = index;
      });

      chrome.storage.sync.get(['prompts'], (result) => {
        const prompts = result.prompts || [];
        const newPrompts = prompts.map(p => ({
          ...p,
          pinnedOrder: p.pinned ? newOrder[p.id] : undefined
        }));

        chrome.storage.sync.set({ prompts: newPrompts });
      });
    }

    sortedPrompts.forEach(prompt => {
      const promptElement = document.createElement('div');
      promptElement.className = 'prompt-item';
      if (prompt.pinned) {
        promptElement.setAttribute('draggable', 'true');
      }
      
      // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const truncatedText = truncateText(prompt.text, 120);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç—É–ª—Ç–∏–ø–∞: –æ—á–∏—â–∞–µ–º –æ—Ç HTML –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 300 —Å–∏–º–≤–æ–ª–∞–º–∏
      const tooltipText = truncateText(stripHtml(prompt.text), 300);
      
      promptElement.innerHTML = `
        <div class="prompt-title">${prompt.pinned ? 'üìå ' : ''}${prompt.title}</div>
        <div class="prompt-text" title="${tooltipText}">${truncatedText}</div>
        ${prompt.tags && prompt.tags.length > 0 ? 
          `<div class="prompt-tags">${prompt.tags.map(tag => `<span class="tag">#${tag}</span>`).join(' ')}</div>` 
          : ''}
        <div class="prompt-actions" data-id="${prompt.id}">
          <button class="prompt-btn pin-prompt" title="${prompt.pinned ? 'Unpin' : 'Pin'}">${prompt.pinned ? 'üìå' : 'üìç'}</button>
          <button class="prompt-btn edit-prompt">‚úé Edit</button>
          <button class="prompt-btn delete-prompt">üóëÔ∏è Delete</button>
          <button class="prompt-btn copy-prompt">üìãCopy Prompt</button>
        </div>
      `;

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è drag and drop
      if (prompt.pinned) {
        promptElement.addEventListener('dragstart', handleDragStart);
        promptElement.addEventListener('dragend', handleDragEnd);
        promptElement.addEventListener('dragover', (e) => {
          e.preventDefault();
          const draggingElement = document.querySelector('.dragging');
          if (!draggingElement || draggingElement === promptElement) return;

          const rect = promptElement.getBoundingClientRect();
          const midY = rect.top + rect.height / 2;
          
          if (e.clientY < midY) {
            pinnedContainer.insertBefore(draggingElement, promptElement);
          } else {
            pinnedContainer.insertBefore(draggingElement, promptElement.nextSibling);
          }
        });
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      if (prompt.pinned) {
        pinnedContainer.appendChild(promptElement);
      } else {
        unpinnedContainer.appendChild(promptElement);
      }
    });
  }

  // Add click handler for import button
  const importBtn = document.querySelector('button[for="importFile"]');
  importBtn.addEventListener('click', () => {
    document.getElementById('importFile').click();
  });

  // Add click handler for clear data button
  clearDataBtn.addEventListener('click', () => {
    if (confirm('Are you sure you want to delete all data? This action cannot be undone.')) {
      chrome.storage.sync.clear(() => {
        if (chrome.runtime.lastError) {
          console.error('Error clearing data:', chrome.runtime.lastError);
          alert('Error clearing data.');
        } else {
          // Reset theme to light
          setTheme('light');
          
          // Clear all data
          currentFavorites = [];
          currentPrompts = [];
          
          // Clear search fields
          searchInput.value = '';
          promptSearchInput.value = '';
          
          // Remove popular tags containers
          const favoritesPopularTags = favoritesSection.querySelector('.popular-tags');
          const promptsPopularTags = promptsSection.querySelector('.popular-tags');
          if (favoritesPopularTags) favoritesPopularTags.remove();
          if (promptsPopularTags) promptsPopularTags.remove();
          
          // Update display
          renderFavorites([]);
          renderPrompts([]);
        }
      });
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  function createFavoriteElement(favorite) {
    const favoriteElement = document.createElement('div');
    favoriteElement.className = 'favorite-chat';
    favoriteElement.setAttribute('data-timestamp', favorite.timestamp);
    
    const chatTime = new Date(favorite.timestamp).toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
    
    // –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤
    const truncatedDescription = favorite.description ? truncateText(favorite.description, 120) : '';
    
    favoriteElement.innerHTML = `
      <div class="chat-item ${favorite.pinned ? 'pinned' : ''}">
        <div class="chat-header">
          <a href="${favorite.url}" target="_blank" class="chat-title">
            ${favorite.pinned ? 'üìå ' : ''}${favorite.title || 'Untitled'}
          </a>
          <div class="button-group">
            <button type="button" class="pin-btn" title="${favorite.pinned ? 'Unpin' : 'Pin'}">${favorite.pinned ? 'üìå' : 'üìç'}</button>
            <button type="button" class="edit-btn" title="Edit">‚úé</button>
            <button type="button" class="delete-btn" title="Delete">√ó</button>
          </div>
        </div>
        <div class="chat-time">${chatTime}</div>
        ${truncatedDescription ? `<div class="description" title="${favorite.description}">${truncatedDescription}</div>` : ''}
        ${favorite.tags && favorite.tags.length > 0 ? 
          `<div class="prompt-tags">${favorite.tags.map(tag => `<span class="tag">#${tag}</span>`).join(' ')}</div>` 
          : ''}
        <button type="button" class="chat-btn" title="View Chat History">üí¨ Chat</button>
      </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const chatBtn = favoriteElement.querySelector('.chat-btn');
    chatBtn.addEventListener('click', () => {
      console.log('Opening chat window for:', favorite);
      chrome.windows.create({
        url: `chat-viewer.html?id=${favorite.timestamp}`,
        type: 'popup',
        width: 800,
        height: 600
      });
    });

    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ...

    return favoriteElement;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —á–∞—Ç–æ–º
  function openChatModal(favorite) {
    const modal = document.getElementById('chatModal');
    const modalTitle = modal.querySelector('.modal-title');
    const modalContent = modal.querySelector('#chatContent');
    const closeBtn = modal.querySelector('.modal-close');
    const copyBtn = modal.querySelector('.copy-btn');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    modalTitle.textContent = `Chat History: ${favorite.title}`;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Ç–∞
    chrome.storage.local.get([`${favorite.timestamp}_meta`], async (metaResult) => {
      if (metaResult[`${favorite.timestamp}_meta`]) {
        const meta = metaResult[`${favorite.timestamp}_meta`];
        const chunks = [];
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏
        for (let i = 0; i < meta.chunks; i++) {
          const key = `${favorite.timestamp}_chunk_${i}`;
          const chunk = await new Promise(resolve => {
            chrome.storage.local.get([key], result => resolve(result[key]));
          });
          chunks.push(chunk);
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        const chatContent = JSON.parse(chunks.join(''));
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Ç–∞
        const chatHtml = chatContent.map(message => {
          if (message.type === 'question') {
            return `
              <div class="chat-message user-message">
                <div class="message-header">User:</div>
                <div class="message-content">${escapeHtml(message.content)}</div>
              </div>
            `;
          } else {
            return `
              <div class="chat-message assistant-message">
                <div class="message-header">Assistant:</div>
                <div class="message-content">${escapeHtml(message.content)}</div>
              </div>
            `;
          }
        }).join('');

        modalContent.innerHTML = `
          <div class="chat-container">
            ${chatHtml}
          </div>
        `;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        copyBtn.style.display = 'block';

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        const handleCopy = () => {
          const textToCopy = chatContent.map(message => {
            const role = message.type === 'question' ? 'User' : 'Assistant';
            return `${role}:\n${message.content}\n`;
          }).join('\n');

          navigator.clipboard.writeText(textToCopy).then(() => {
            const originalText = copyBtn.innerHTML;
            copyBtn.innerHTML = '‚úÖ Copied!';
            setTimeout(() => {
              copyBtn.innerHTML = originalText;
            }, 2000);
          }).catch(err => {
            console.error('Failed to copy text: ', err);
            copyBtn.innerHTML = '‚ùå Error';
            setTimeout(() => {
              copyBtn.innerHTML = originalText;
            }, 2000);
          });
        };

        copyBtn.addEventListener('click', handleCopy);
      } else {
        modalContent.innerHTML = `
          <p>No chat history available for "${escapeHtml(favorite.title)}"</p>
          <p>URL: ${escapeHtml(favorite.url)}</p>
        `;
        copyBtn.style.display = 'none';
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      modal.classList.add('active');

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
      const closeModal = () => {
        modal.classList.remove('active');
        copyBtn.classList.add('hidden');
        copyBtn.classList.remove('visible');
        closeBtn.removeEventListener('click', closeModal);
        modal.removeEventListener('click', handleOutsideClick);
        copyBtn.removeEventListener('click', handleCopy);
      };

      // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
      closeBtn.addEventListener('click', closeModal);

      // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      const handleOutsideClick = (event) => {
        if (event.target === modal) {
          closeModal();
        }
      };
      modal.addEventListener('click', handleOutsideClick);
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
  function escapeHtml(unsafe) {
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç chat-viewer
  chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.action === 'updateDescription') {
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
      chrome.storage.sync.get(['favorites'], (result) => {
        const favorites = result.favorites || [];
        const updatedFavorites = favorites.map(f => {
          if (f.timestamp === message.timestamp) {
            return { ...f, description: message.description };
          }
          return f;
        });

        chrome.storage.sync.set({ favorites: updatedFavorites }, () => {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
          currentFavorites = updatedFavorites;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
          const editForm = document.querySelector('.edit-form');
          if (editForm) {
            const descriptionTextarea = editForm.querySelector('.edit-description');
            if (descriptionTextarea) {
              descriptionTextarea.value = message.description;
            }
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
          filterFavorites(searchInput.value);
        });
      });
    }
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –¥—Ä—É–≥–∏—Ö –æ–∫–æ–Ω
  window.addEventListener('message', (event) => {
    if (event.data.action === 'updateDescription') {
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
      chrome.storage.sync.get(['favorites'], (result) => {
        const favorites = result.favorites || [];
        const updatedFavorites = favorites.map(f => {
          if (f.timestamp === event.data.timestamp) {
            return { ...f, description: event.data.description };
          }
          return f;
        });

        chrome.storage.sync.set({ favorites: updatedFavorites }, () => {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
          currentFavorites = updatedFavorites;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
          const editForm = document.querySelector('.edit-form');
          if (editForm) {
            const descriptionTextarea = editForm.querySelector('.edit-description');
            if (descriptionTextarea) {
              descriptionTextarea.value = event.data.description;
            }
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
          filterFavorites(searchInput.value);
        });
      });
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è HTML
  function renderHTML(html) {
    const div = document.createElement('div');
    div.innerHTML = html;
    return div.textContent || div.innerText || '';
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  let settingsBeforeCheck = null;

  async function checkConnection(settings) {
    const checkConnectionBtn = document.getElementById('checkConnectionBtn');
    
    try {
      checkConnectionBtn.classList.add('checking');
      checkConnectionBtn.textContent = '‚åõ';
      
      const currentProvider = settings.provider;
      const apiKey = settings.apiKeys[currentProvider];

      if (!apiKey) {
        throw new Error('API key not found');
      }

      // –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      await chrome.storage.sync.set({ settings });

      let response;
      let result;
      
      if (currentProvider === 'google') {
        const apiVersion = settings.model === 'gemini-pro' ? 'v1' : 'v1beta';
        const modelId = settings.model === 'gemini-pro' ? 'gemini-pro' : settings.model;
        
        response = await fetch(`https://generativelanguage.googleapis.com/${apiVersion}/models/${modelId}:generateContent?key=${apiKey}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            contents: [{
              parts: [{
                text: 'Generate a one-word response: "test"'
              }]
            }]
          })
        });

        if (!response.ok) {
          throw new Error(`API error: ${response.status}`);
        }

        const data = await response.json();
        if (!data.candidates || !data.candidates[0] || !data.candidates[0].content || !data.candidates[0].content.parts || !data.candidates[0].content.parts[0]) {
          throw new Error('Invalid API response format from Google AI');
        }
        result = data.candidates[0].content.parts[0].text;

      } else {
        response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`,
            'HTTP-Referer': 'https://github.com/your-username/deepseek-favorites',
            'X-Title': 'DeepSeek Favorites Extension'
          },
          body: JSON.stringify({
            model: settings.model,
            messages: [
              {
                role: 'user',
                content: 'Generate a one-word response: "test"'
              }
            ]
          })
        });

        if (!response.ok) {
          throw new Error(`API error: ${response.status}`);
        }

        const data = await response.json();
        if (!data.choices || !Array.isArray(data.choices) || data.choices.length === 0 || !data.choices[0].message || !data.choices[0].message.content) {
          throw new Error('Invalid API response format from OpenRouter');
        }
        result = data.choices[0].message.content;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç–µ
      if (!result || typeof result !== 'string' || result.trim().length === 0) {
        throw new Error('Empty or invalid response from the model');
      }

      // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
      checkConnectionBtn.classList.remove('checking', 'error');
      checkConnectionBtn.classList.add('success');
      checkConnectionBtn.textContent = '‚úì';
      showNotification('Connection successful! Model responded correctly.');

      // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setTimeout(() => {
        checkConnectionBtn.classList.remove('success');
        checkConnectionBtn.textContent = 'üîÑ';
      }, 3000);

    } catch (error) {
      console.error('Connection check failed:', error);
      checkConnectionBtn.classList.remove('checking', 'success');
      checkConnectionBtn.classList.add('error');
      checkConnectionBtn.textContent = '‚úï';
      showNotification('Connection failed: ' + error.message, true);

      // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setTimeout(() => {
        checkConnectionBtn.classList.remove('error');
        checkConnectionBtn.textContent = 'üîÑ';
      }, 3000);
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  document.getElementById('checkConnectionBtn').addEventListener('click', async () => {
    const currentProvider = providerSelect.value;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö API –∫–ª—é—á–µ–π
    const currentSettings = await new Promise(resolve => {
      chrome.storage.sync.get(['settings'], result => {
        resolve(result.settings || DEFAULT_SETTINGS);
      });
    });

    const newSettings = {
      provider: currentProvider,
      apiKeys: {
        ...currentSettings.apiKeys,
        [currentProvider]: apiKeyInput.value.trim()
      },
      model: modelSelect.value,
      titlePrompt: titlePromptInput.value.trim() || DEFAULT_SETTINGS.titlePrompt,
      summaryPrompt: summaryPromptInput.value.trim() || DEFAULT_SETTINGS.summaryPrompt,
      tagsPrompt: tagsPromptInput.value.trim() || DEFAULT_SETTINGS.tagsPrompt
    };
    
    checkConnection(newSettings);
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  function loadSettings() {
    chrome.storage.sync.get(['settings'], (result) => {
      const settings = result.settings || DEFAULT_SETTINGS;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      providerSelect.value = settings.provider;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      updateModelsList(settings.provider);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      apiKeyInput.value = settings.apiKeys[settings.provider] || '';
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
      modelSelect.value = settings.model || PROVIDER_MODELS[settings.provider][0].value;
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤
      titlePromptInput.value = settings.titlePrompt || DEFAULT_SETTINGS.titlePrompt;
      summaryPromptInput.value = settings.summaryPrompt || DEFAULT_SETTINGS.summaryPrompt;
      tagsPromptInput.value = settings.tagsPrompt || DEFAULT_SETTINGS.tagsPrompt;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      lastSavedSettings = settings;
    });
  }

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  function saveSettings() {
    chrome.storage.sync.get(['settings'], (result) => {
      const currentSettings = result.settings || DEFAULT_SETTINGS;
      const provider = document.getElementById('provider').value;
      const apiKey = document.getElementById('apiKey').value.trim();
      const model = document.getElementById('model').value;
      const summaryPrompt = document.getElementById('summaryPrompt').value.trim();
      const titlePrompt = document.getElementById('titlePrompt').value.trim();
      const tagsPrompt = document.getElementById('tagsPrompt').value.trim();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ API –∫–ª—é—á–∏
      const newSettings = {
        provider: provider,
        apiKeys: {
          openrouter: provider === 'openrouter' ? apiKey : currentSettings.apiKeys.openrouter,
          google: provider === 'google' ? apiKey : currentSettings.apiKeys.google
        },
        model: model,
        titlePrompt: titlePrompt || DEFAULT_SETTINGS.titlePrompt,
        summaryPrompt: summaryPrompt || DEFAULT_SETTINGS.summaryPrompt,
        tagsPrompt: tagsPrompt || DEFAULT_SETTINGS.tagsPrompt
      };

      chrome.storage.sync.set({ settings: newSettings }, () => {
        console.log('Settings saved:', newSettings);
        showNotification('Settings saved automatically');
        lastSavedSettings = newSettings;
      });
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
  document.querySelectorAll('#settingsModal input, #settingsModal select, #settingsModal textarea').forEach(element => {
    ['input', 'change'].forEach(eventType => {
      element.addEventListener(eventType, saveSettings);
    });
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –¥—Ä—É–≥–∏—Ö –æ–∫–æ–Ω
  window.addEventListener('message', (event) => {
    if (event.data.action === 'updateDescription') {
      const editForm = document.querySelector('.edit-form');
      if (editForm) {
        const descriptionTextarea = editForm.querySelector('.edit-description');
        if (descriptionTextarea) {
          descriptionTextarea.value = event.data.description;
        }
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  document.getElementById('provider').addEventListener('change', (e) => {
    const newProvider = e.target.value;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    chrome.storage.sync.get(['settings'], (result) => {
      const settings = result.settings || DEFAULT_SETTINGS;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ API –∫–ª—é—á–∞
      document.getElementById('apiKey').value = settings.apiKeys[newProvider] || '';
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
      updateModelsList(newProvider);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      saveSettings();
    });
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤
  async function generateTags(text) {
    const settings = await new Promise(resolve => {
      chrome.storage.sync.get(['settings'], result => {
        resolve(result.settings || DEFAULT_SETTINGS);
      });
    });

    if (!settings.apiKeys[settings.provider]) {
      throw new Error('API key is not set');
    }

    let response;
    if (settings.provider === 'google') {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Google AI API
      const apiVersion = settings.model === 'gemini-pro' ? 'v1' : 'v1beta';
      const modelId = settings.model === 'gemini-pro' ? 'gemini-pro' : settings.model;
      
      response = await fetch(`https://generativelanguage.googleapis.com/${apiVersion}/models/${modelId}:generateContent?key=${settings.apiKeys[settings.provider]}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: settings.tagsPrompt.replace('{text}', text)
            }]
          }]
        })
      });

      if (!response.ok) {
        const error = await response.json();
        console.error('Google AI API error:', error);
        throw new Error(error.error?.message || 'Failed to generate tags');
      }

      const data = await response.json();
      console.log('Google AI API response:', data);

      if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
        console.error('Invalid Google AI response format:', data);
        throw new Error('Invalid response format from Google AI');
      }

      const content = data.candidates[0].content;
      if (!content.parts || !content.parts[0] || !content.parts[0].text) {
        console.error('Missing text in Google AI response:', content);
        throw new Error('No text generated from Google AI');
      }

      return content.parts[0].text;
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter API
      response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${settings.apiKeys[settings.provider]}`,
          'HTTP-Referer': 'https://github.com/your-username/deepseek-favorites',
          'X-Title': 'DeepSeek Favorites Extension'
        },
        body: JSON.stringify({
          model: settings.model,
          messages: [
            {
              role: 'user',
              content: settings.tagsPrompt.replace('{text}', text)
            }
          ]
        })
      });

      if (!response.ok) {
        const error = await response.json();
        console.error('OpenRouter API error:', error);
        throw new Error(error.error?.message || 'Failed to generate tags');
      }

      const data = await response.json();
      console.log('OpenRouter API response:', data);

      if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        console.error('Invalid OpenRouter response format:', data);
        throw new Error('Invalid response format from OpenRouter');
      }

      return data.choices[0].message.content.trim();
    }
  }

 
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è drag and drop
  function setElementDragging(element, isDragging) {
    element.classList.toggle('dragging', isDragging);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
  function setCopyButtonVisibility(button, isVisible) {
    button.classList.toggle('visible', isVisible);
    button.classList.toggle('hidden', !isVisible);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã
  function closeFormWithAnimation(form) {
    form.classList.add('slide-out');
    setTimeout(() => {
      form.classList.add('hidden');
      form.classList.remove('slide-out');
    }, 300);
  }

  // –î–ª—è drag and drop
  function handleDragStart(e) {
    this.classList.add('dragging');
  }

  function handleDragEnd(e) {
    this.classList.remove('dragging');
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  async function generateTitle(text) {
    try {
      const settings = await new Promise(resolve => {
        chrome.storage.sync.get(['settings'], result => {
          resolve(result.settings || DEFAULT_SETTINGS);
        });
      });

      if (!settings.apiKeys[settings.provider]) {
        throw new Error('API key not found. Please add it in Settings.');
      }

      let response;
      let title;

      if (settings.provider === 'google') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Google AI API
        const apiVersion = settings.model === 'gemini-pro' ? 'v1' : 'v1beta';
        const modelId = settings.model === 'gemini-pro' ? 'gemini-pro' : settings.model;
        
        response = await fetch(`https://generativelanguage.googleapis.com/${apiVersion}/models/${modelId}:generateContent?key=${settings.apiKeys[settings.provider]}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            contents: [{
              parts: [{
                text: settings.titlePrompt.replace('{text}', text)
              }]
            }]
          })
        });

        if (!response.ok) {
          const error = await response.json();
          console.error('Google AI API error:', error);
          throw new Error(error.error?.message || 'Failed to generate title');
        }

        const data = await response.json();
        console.log('Google AI API response:', data);

        if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
          console.error('Invalid Google AI response format:', data);
          throw new Error('Invalid response format from Google AI');
        }

        const content = data.candidates[0].content;
        if (!content.parts || !content.parts[0] || !content.parts[0].text) {
          console.error('Missing text in Google AI response:', content);
          throw new Error('No text generated from Google AI');
        }

        title = content.parts[0].text;
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter API
        response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${settings.apiKeys[settings.provider]}`,
            'HTTP-Referer': 'https://github.com/your-username/deepseek-favorites',
            'X-Title': 'DeepSeek Favorites Extension'
          },
          body: JSON.stringify({
            model: settings.model,
            messages: [
              {
                role: 'user',
                content: settings.titlePrompt.replace('{text}', text)
              }
            ]
          })
        });

        if (!response.ok) {
          const error = await response.json();
          console.error('OpenRouter API error:', error);
          throw new Error(error.message || `API error: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        console.log('OpenRouter API response:', data);

        if (!data || !data.choices) {
          console.error('Invalid API response format:', data);
          throw new Error('Invalid API response format - missing choices array');
        }

        if (data.choices.length === 0) {
          console.error('Empty choices array in response:', data);
          throw new Error('No response generated from the model');
        }

        const firstChoice = data.choices[0];
        if (!firstChoice || !firstChoice.message) {
          console.error('Invalid choice format:', firstChoice);
          throw new Error('Invalid response format - missing message');
        }

        title = firstChoice.message.content;
        if (!title) {
          console.error('Empty content in response:', firstChoice);
          throw new Error('Empty response from the model');
        }
      }

      // –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
      await navigator.clipboard.writeText(title);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      showNotification('Title generated and copied to clipboard!');

      return title;
    } catch (error) {
      console.error('Error generating title:', error);
      throw new Error(`Failed to generate title: ${error.message}`);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  function loadFavorites() {
    chrome.storage.sync.get(['favorites'], (result) => {
      console.log('Loaded favorites:', result.favorites);
      currentFavorites = result.favorites || [];
      renderFavorites(currentFavorites);
    });
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  loadFavorites();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  loadPrompts();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  loadSettings();
}); 